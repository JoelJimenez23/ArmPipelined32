$date
	Sat Nov 30 00:20:07 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$var wire 32 ! WriteData [31:0] $end
$var wire 1 " MemWrite $end
$var wire 32 # DataAdr [31:0] $end
$var reg 1 $ clk $end
$var reg 1 % reset $end
$scope module dut $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 32 & WriteData [31:0] $end
$var wire 32 ' ReadData [31:0] $end
$var wire 32 ( PCF [31:0] $end
$var wire 1 " MemWrite $end
$var wire 32 ) InstrF [31:0] $end
$var wire 32 * DataAdr [31:0] $end
$scope module arm $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 32 + WriteDataM [31:0] $end
$var wire 1 , StallF $end
$var wire 1 - StallD $end
$var wire 1 . RegWriteW $end
$var wire 1 / RegWriteMulTopW $end
$var wire 1 0 RegWriteM $end
$var wire 2 1 RegSrcD [1:0] $end
$var wire 32 2 ReadDataM [31:0] $end
$var wire 1 3 PCSrcW $end
$var wire 32 4 PCF [31:0] $end
$var wire 1 5 MulOpE $end
$var wire 1 6 MemtoRegW $end
$var wire 1 7 MemtoRegE $end
$var wire 1 " MemWriteM $end
$var wire 1 8 MemIndexW $end
$var wire 1 9 Match_4E_W $end
$var wire 1 : Match_4E_M $end
$var wire 1 ; Match_3E_W $end
$var wire 1 < Match_3E_M $end
$var wire 1 = Match_2E_W $end
$var wire 1 > Match_2E_M $end
$var wire 1 ? Match_1E_W $end
$var wire 1 @ Match_1E_M $end
$var wire 1 A Match_1234D_E $end
$var wire 32 B InstrF [31:0] $end
$var wire 32 C InstrD [31:0] $end
$var wire 1 D IndexOpW $end
$var wire 2 E ImmSrcD [1:0] $end
$var wire 2 F ForwardDE [1:0] $end
$var wire 2 G ForwardCE [1:0] $end
$var wire 2 H ForwardBE [1:0] $end
$var wire 2 I ForwardAE [1:0] $end
$var wire 1 J FlushE $end
$var wire 1 K DivMulRegSrcD $end
$var wire 1 L CarryE $end
$var wire 1 M ByteOpW $end
$var wire 1 N ALUSrcE $end
$var wire 2 O ALUResultSrcE [1:0] $end
$var wire 32 P ALUOutM [31:0] $end
$var wire 4 Q ALUFlags [3:0] $end
$var wire 4 R ALUControlE [3:0] $end
$scope module c $end
$var wire 20 S Instr [31:12] $end
$var wire 4 T InstrD_7_4 [3:0] $end
$var wire 1 U RegWriteMemoryD $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 1 . RegWriteW $end
$var wire 1 / RegWriteMulTopW $end
$var wire 1 V RegWriteMulTopM $end
$var wire 1 W RegWriteMulTopE $end
$var wire 1 X RegWriteMulTopD $end
$var wire 1 Y RegWriteMemoryM $end
$var wire 1 Z RegWriteMemoryE $end
$var wire 1 [ RegWriteMPrev $end
$var wire 1 0 RegWriteM $end
$var wire 1 \ RegWriteE $end
$var wire 1 ] RegWriteD $end
$var wire 2 ^ RegSrcD [1:0] $end
$var wire 1 3 PCSrcW $end
$var wire 1 _ PCSrcMPrev $end
$var wire 1 ` PCSrcM $end
$var wire 1 a PCSrcE $end
$var wire 1 b PCSrcD $end
$var wire 1 c NoWriteE $end
$var wire 1 d NoWriteD $end
$var wire 1 5 MulOpE $end
$var wire 1 e MulOpD $end
$var wire 1 6 MemtoRegW $end
$var wire 1 f MemtoRegM $end
$var wire 1 7 MemtoRegE $end
$var wire 1 g MemtoRegD $end
$var wire 1 h MemWriteMPrev $end
$var wire 1 " MemWriteM $end
$var wire 1 i MemWriteE $end
$var wire 1 j MemWriteD $end
$var wire 1 8 MemIndexW $end
$var wire 1 k MemIndexM $end
$var wire 1 l MemIndexE $end
$var wire 1 m MemIndexD $end
$var wire 1 D IndexOpW $end
$var wire 1 n IndexOpM $end
$var wire 1 o IndexOpE $end
$var wire 1 p IndexOpD $end
$var wire 2 q ImmSrcD [1:0] $end
$var wire 4 r FlagsNext [3:0] $end
$var wire 4 s FlagsE [3:0] $end
$var wire 2 t FlagWriteE [1:0] $end
$var wire 2 u FlagWriteD [1:0] $end
$var wire 1 K DivMulRegSrcD $end
$var wire 4 v CondE [3:0] $end
$var wire 1 L CarryE $end
$var wire 1 M ByteOpW $end
$var wire 1 w ByteOpM $end
$var wire 1 x ByteOpE $end
$var wire 1 y ByteOpD $end
$var wire 1 z BranchE $end
$var wire 1 { BranchD $end
$var wire 1 N ALUSrcE $end
$var wire 1 | ALUSrcD $end
$var wire 2 } ALUResultSrcE [1:0] $end
$var wire 2 ~ ALUResultSrcD [1:0] $end
$var wire 4 !" ALUFlags [3:0] $end
$var wire 4 "" ALUControlE [3:0] $end
$var wire 4 #" ALUControlD [3:0] $end
$scope module ALUControlDReg $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 4 $" d [3:0] $end
$var parameter 32 %" WIDTH $end
$var reg 4 &" q [3:0] $end
$upscope $end
$scope module ALUResultSrcDReg $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 2 '" d [1:0] $end
$var parameter 32 (" WIDTH $end
$var reg 2 )" q [1:0] $end
$upscope $end
$scope module ALUSrcDReg $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 1 | d $end
$var parameter 32 *" WIDTH $end
$var reg 1 N q $end
$upscope $end
$scope module BranchDReg $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 1 { d $end
$var parameter 32 +" WIDTH $end
$var reg 1 z q $end
$upscope $end
$scope module ByteOpDReg $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 1 y d $end
$var parameter 32 ," WIDTH $end
$var reg 1 x q $end
$upscope $end
$scope module ByteOpEReg $end
$var wire 1 $ clk $end
$var wire 1 x d $end
$var wire 1 % reset $end
$var parameter 32 -" WIDTH $end
$var reg 1 w q $end
$upscope $end
$scope module ByteOpMReg $end
$var wire 1 $ clk $end
$var wire 1 w d $end
$var wire 1 % reset $end
$var parameter 32 ." WIDTH $end
$var reg 1 M q $end
$upscope $end
$scope module CondDReg $end
$var wire 1 $ clk $end
$var wire 4 /" d [3:0] $end
$var wire 1 % reset $end
$var parameter 32 0" WIDTH $end
$var reg 4 1" q [3:0] $end
$upscope $end
$scope module FlagSReg $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 4 2" d [3:0] $end
$var parameter 32 3" WIDTH $end
$var reg 4 4" q [3:0] $end
$upscope $end
$scope module FlagWriteDReg $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 2 5" d [1:0] $end
$var parameter 32 6" WIDTH $end
$var reg 2 7" q [1:0] $end
$upscope $end
$scope module IndexOpDReg $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 1 p d $end
$var parameter 32 8" WIDTH $end
$var reg 1 o q $end
$upscope $end
$scope module IndexOpEReg $end
$var wire 1 $ clk $end
$var wire 1 o d $end
$var wire 1 % reset $end
$var parameter 32 9" WIDTH $end
$var reg 1 n q $end
$upscope $end
$scope module IndexOpMReg $end
$var wire 1 $ clk $end
$var wire 1 n d $end
$var wire 1 % reset $end
$var parameter 32 :" WIDTH $end
$var reg 1 D q $end
$upscope $end
$scope module MemIndexDReg $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 1 m d $end
$var parameter 32 ;" WIDTH $end
$var reg 1 l q $end
$upscope $end
$scope module MemIndexEReg $end
$var wire 1 $ clk $end
$var wire 1 l d $end
$var wire 1 % reset $end
$var parameter 32 <" WIDTH $end
$var reg 1 k q $end
$upscope $end
$scope module MemIndexMReg $end
$var wire 1 $ clk $end
$var wire 1 k d $end
$var wire 1 % reset $end
$var parameter 32 =" WIDTH $end
$var reg 1 8 q $end
$upscope $end
$scope module MemWriteDReg $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 1 j d $end
$var parameter 32 >" WIDTH $end
$var reg 1 i q $end
$upscope $end
$scope module MemWriteEReg $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 1 h d $end
$var parameter 32 ?" WIDTH $end
$var reg 1 " q $end
$upscope $end
$scope module MemtoRegDReg $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 1 g d $end
$var parameter 32 @" WIDTH $end
$var reg 1 7 q $end
$upscope $end
$scope module MemtoRegEReg $end
$var wire 1 $ clk $end
$var wire 1 7 d $end
$var wire 1 % reset $end
$var parameter 32 A" WIDTH $end
$var reg 1 f q $end
$upscope $end
$scope module MemtoRegMReg $end
$var wire 1 $ clk $end
$var wire 1 f d $end
$var wire 1 % reset $end
$var parameter 32 B" WIDTH $end
$var reg 1 6 q $end
$upscope $end
$scope module MulOpDReg $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 1 e d $end
$var parameter 32 C" WIDTH $end
$var reg 1 5 q $end
$upscope $end
$scope module NoWriteDReg $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 1 d d $end
$var parameter 32 D" WIDTH $end
$var reg 1 c q $end
$upscope $end
$scope module PCSrcDReg $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 1 b d $end
$var parameter 32 E" WIDTH $end
$var reg 1 a q $end
$upscope $end
$scope module PCSrcEReg $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 1 _ d $end
$var parameter 32 F" WIDTH $end
$var reg 1 ` q $end
$upscope $end
$scope module PCSrcMReg $end
$var wire 1 $ clk $end
$var wire 1 ` d $end
$var wire 1 % reset $end
$var parameter 32 G" WIDTH $end
$var reg 1 3 q $end
$upscope $end
$scope module RegWriteDReg $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 1 ] d $end
$var parameter 32 H" WIDTH $end
$var reg 1 \ q $end
$upscope $end
$scope module RegWriteEReg $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 1 [ d $end
$var parameter 32 I" WIDTH $end
$var reg 1 0 q $end
$upscope $end
$scope module RegWriteMReg $end
$var wire 1 $ clk $end
$var wire 1 0 d $end
$var wire 1 % reset $end
$var parameter 32 J" WIDTH $end
$var reg 1 . q $end
$upscope $end
$scope module RegWriteMemoryDReg $end
$var wire 1 $ clk $end
$var wire 1 U d $end
$var wire 1 % reset $end
$var parameter 32 K" WIDTH $end
$var reg 1 Z q $end
$upscope $end
$scope module RegWriteMemoryEReg $end
$var wire 1 $ clk $end
$var wire 1 Z d $end
$var wire 1 % reset $end
$var parameter 32 L" WIDTH $end
$var reg 1 Y q $end
$upscope $end
$scope module RegWriteMemoryMReg $end
$var wire 1 $ clk $end
$var wire 1 Y d $end
$var wire 1 % reset $end
$var parameter 32 M" WIDTH $end
$var reg 1 N" q $end
$upscope $end
$scope module WriteMulTopDReg $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 1 X d $end
$var parameter 32 O" WIDTH $end
$var reg 1 W q $end
$upscope $end
$scope module WriteMulTopEReg $end
$var wire 1 $ clk $end
$var wire 1 W d $end
$var wire 1 % reset $end
$var parameter 32 P" WIDTH $end
$var reg 1 V q $end
$upscope $end
$scope module WriteMulTopMReg $end
$var wire 1 $ clk $end
$var wire 1 V d $end
$var wire 1 % reset $end
$var parameter 32 Q" WIDTH $end
$var reg 1 / q $end
$upscope $end
$scope module cl $end
$var wire 1 z BranchE $end
$var wire 4 R" CondE [3:0] $end
$var wire 2 S" FlagWrite [1:0] $end
$var wire 2 T" FlagWriteE [1:0] $end
$var wire 4 U" FlagsE [3:0] $end
$var wire 1 i MemWriteE $end
$var wire 1 h MemWriteMPrev $end
$var wire 1 c NoWriteE $end
$var wire 1 a PCSrcE $end
$var wire 1 _ PCSrcMPrev $end
$var wire 1 \ RegWriteE $end
$var wire 1 [ RegWriteMPrev $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 4 V" FlagsNext [3:0] $end
$var wire 1 W" CondExE $end
$var wire 1 L CarryE $end
$var wire 4 X" ALUFlags [3:0] $end
$scope module cc $end
$var wire 4 Y" Cond [3:0] $end
$var wire 4 Z" Flags [3:0] $end
$var wire 1 [" ge $end
$var wire 1 \" zero $end
$var wire 1 ]" overflow $end
$var wire 1 ^" neg $end
$var wire 1 _" carry $end
$var reg 1 W" CondEx $end
$upscope $end
$scope module flagreg0 $end
$var wire 1 $ clk $end
$var wire 2 `" d [1:0] $end
$var wire 1 a" en $end
$var wire 1 % reset $end
$var parameter 32 b" WIDTH $end
$var reg 2 c" q [1:0] $end
$upscope $end
$scope module flagreg1 $end
$var wire 1 $ clk $end
$var wire 2 d" d [1:0] $end
$var wire 1 e" en $end
$var wire 1 % reset $end
$var parameter 32 f" WIDTH $end
$var reg 2 g" q [1:0] $end
$upscope $end
$upscope $end
$scope module dec $end
$var wire 2 h" ALUResultSrcD [1:0] $end
$var wire 6 i" Funct [5:0] $end
$var wire 1 p IndexOpD $end
$var wire 4 j" InstrD_7_4 [3:0] $end
$var wire 1 m MemIndexD $end
$var wire 1 e MulOpD $end
$var wire 2 k" Op [1:0] $end
$var wire 1 b PCSrcD $end
$var wire 4 l" Rd [3:0] $end
$var wire 1 X RegWriteMulTopD $end
$var wire 1 ] RegWriteD $end
$var wire 2 m" RegSrcD [1:0] $end
$var wire 1 g MemtoRegD $end
$var wire 1 j MemWriteD $end
$var wire 2 n" ImmSrcD [1:0] $end
$var wire 1 K DivMulRegSrcD $end
$var wire 1 y ByteOpD $end
$var wire 1 { BranchD $end
$var wire 1 | ALUSrcD $end
$var wire 1 o" ALUOp $end
$var reg 4 p" ALUControlD [3:0] $end
$var reg 2 q" ALUResultSrcD_ [1:0] $end
$var reg 1 K DivMulRegSrcD_ $end
$var reg 2 r" FlagWriteD [1:0] $end
$var reg 1 s" IndexOpD_ $end
$var reg 1 t" MemIndexD_ $end
$var reg 1 u" MulOpD_ $end
$var reg 1 d NoWriteD $end
$var reg 1 v" RegWriteMulTopD_ $end
$var reg 11 w" controls [10:0] $end
$upscope $end
$upscope $end
$scope module dp $end
$var wire 4 x" ALUControlE [3:0] $end
$var wire 2 y" ALUResultSrcE [1:0] $end
$var wire 1 N ALUSrcE $end
$var wire 1 M ByteOpW $end
$var wire 1 L CarryE $end
$var wire 1 K DivMulRegSrcD $end
$var wire 2 z" ImmSrcD [1:0] $end
$var wire 1 D IndexOpW $end
$var wire 1 A Match_1234D_E $end
$var wire 1 8 MemIndexW $end
$var wire 1 7 MemtoRegE $end
$var wire 1 6 MemtoRegW $end
$var wire 1 5 MulOpE $end
$var wire 1 3 PCSrcW $end
$var wire 2 {" RegSrcD [1:0] $end
$var wire 1 / RegWriteMulTopW $end
$var wire 1 . RegWriteW $end
$var wire 1 |" clear $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 1 }" ra4d_wa3e_x $end
$var wire 1 ~" ra4d_wa3e $end
$var wire 1 !# ra3d_wa3e_x $end
$var wire 1 "# ra3d_wa3e $end
$var wire 1 ## ra2d_wa3e_x $end
$var wire 1 $# ra2d_wa3e $end
$var wire 1 %# ra1d_wa3e_x $end
$var wire 1 &# ra1d_wa3e $end
$var wire 4 '# preRA1D [3:0] $end
$var wire 1 (# isImmE $end
$var wire 32 )# WriteDataM [31:0] $end
$var wire 32 *# WriteDataEShifted [31:0] $end
$var wire 32 +# WriteDataE [31:0] $end
$var wire 4 ,# WA4W [3:0] $end
$var wire 4 -# WA4M [3:0] $end
$var wire 4 .# WA4E [3:0] $end
$var wire 4 /# WA4D [3:0] $end
$var wire 1 , StallF $end
$var wire 1 - StallD $end
$var wire 32 0# SrcBE [31:0] $end
$var wire 32 1# SrcAEMulE [31:0] $end
$var wire 32 2# SrcAEDivE [31:0] $end
$var wire 32 3# SrcAE [31:0] $end
$var wire 12 4# ShiftInstrE [11:0] $end
$var wire 32 5# ResultW [31:0] $end
$var wire 32 6# ReadDataWPost [31:0] $end
$var wire 32 7# ReadDataW [31:0] $end
$var wire 32 8# ReadDataM [31:0] $end
$var wire 32 9# RD4Ehz [31:0] $end
$var wire 32 :# RD4E [31:0] $end
$var wire 32 ;# RD4D [31:0] $end
$var wire 32 <# RD3Ehz [31:0] $end
$var wire 32 =# RD3E [31:0] $end
$var wire 32 ># RD3D [31:0] $end
$var wire 32 ?# RD2E [31:0] $end
$var wire 32 @# RD2D [31:0] $end
$var wire 32 A# RD1E [31:0] $end
$var wire 32 B# RD1D [31:0] $end
$var wire 4 C# RA3E [3:0] $end
$var wire 4 D# RA2E [3:0] $end
$var wire 4 E# RA2D [3:0] $end
$var wire 4 F# RA1W [3:0] $end
$var wire 4 G# RA1M [3:0] $end
$var wire 4 H# RA1E [3:0] $end
$var wire 4 I# RA1D [3:0] $end
$var wire 32 J# PCPlus4F [31:0] $end
$var wire 32 K# PCNext [31:0] $end
$var wire 32 L# PCF [31:0] $end
$var wire 3 M# MulInstrE [2:0] $end
$var wire 32 N# MulHalfTopW [31:0] $end
$var wire 32 O# MulHalfTopM [31:0] $end
$var wire 32 P# MulHalfTopE [31:0] $end
$var wire 1 9 Match_4E_W $end
$var wire 1 : Match_4E_M $end
$var wire 1 ; Match_3E_W $end
$var wire 1 < Match_3E_M $end
$var wire 1 = Match_2E_W $end
$var wire 1 > Match_2E_M $end
$var wire 1 ? Match_1E_W $end
$var wire 1 @ Match_1E_M $end
$var wire 4 Q# MULAuxW [3:0] $end
$var wire 4 R# MULAuxM [3:0] $end
$var wire 4 S# MULAuxE [3:0] $end
$var wire 32 T# InstrF [31:0] $end
$var wire 32 U# InstrD [31:0] $end
$var wire 2 V# ForwardDE [1:0] $end
$var wire 2 W# ForwardCE [1:0] $end
$var wire 2 X# ForwardBE [1:0] $end
$var wire 2 Y# ForwardAE [1:0] $end
$var wire 1 J FlushE $end
$var wire 32 Z# ExtImmE [31:0] $end
$var wire 32 [# ExtImmD_rot [31:0] $end
$var wire 32 \# ExtImmD [31:0] $end
$var wire 1 ]# DivInstrE $end
$var wire 32 ^# ALUResultWIndex [31:0] $end
$var wire 32 _# ALUResultW [31:0] $end
$var wire 32 `# ALUResultM [31:0] $end
$var wire 32 a# ALUResultEPost [31:0] $end
$var wire 32 b# ALUResultE [31:0] $end
$var wire 32 c# ALUOutW [31:0] $end
$var wire 32 d# ALUOutM [31:0] $end
$var wire 4 e# ALUFlags [3:0] $end
$scope module ALUOutReg $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 32 f# d [31:0] $end
$var parameter 32 g# WIDTH $end
$var reg 32 h# q [31:0] $end
$upscope $end
$scope module ALUPreOutReg $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 32 i# d [31:0] $end
$var parameter 32 j# WIDTH $end
$var reg 32 k# q [31:0] $end
$upscope $end
$scope module ALUResultEPostMux $end
$var wire 2 l# s [1:0] $end
$var wire 32 m# y [31:0] $end
$var wire 32 n# d3 [31:0] $end
$var wire 32 o# d2 [31:0] $end
$var wire 32 p# d1 [31:0] $end
$var wire 32 q# d0 [31:0] $end
$var parameter 32 r# WIDTH $end
$upscope $end
$scope module ALUResultEReg $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 32 s# d [31:0] $end
$var parameter 32 t# WIDTH $end
$var reg 32 u# q [31:0] $end
$upscope $end
$scope module ALUResultMReg $end
$var wire 1 $ clk $end
$var wire 32 v# d [31:0] $end
$var wire 1 % reset $end
$var parameter 32 w# WIDTH $end
$var reg 32 x# q [31:0] $end
$upscope $end
$scope module DivInstrDReg $end
$var wire 1 $ clk $end
$var wire 1 y# d $end
$var wire 1 % reset $end
$var wire 1 J clear $end
$var parameter 32 z# WIDTH $end
$var reg 1 ]# q $end
$upscope $end
$scope module ExtReg $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 32 {# d [31:0] $end
$var wire 1 J clear $end
$var parameter 32 |# WIDTH $end
$var reg 32 }# q [31:0] $end
$upscope $end
$scope module ForwardAEMux $end
$var wire 32 ~# d2 [31:0] $end
$var wire 32 !$ y [31:0] $end
$var wire 2 "$ s [1:0] $end
$var wire 32 #$ d1 [31:0] $end
$var wire 32 $$ d0 [31:0] $end
$var parameter 32 %$ WIDTH $end
$upscope $end
$scope module ForwardBEMux $end
$var wire 32 &$ d2 [31:0] $end
$var wire 32 '$ y [31:0] $end
$var wire 2 ($ s [1:0] $end
$var wire 32 )$ d1 [31:0] $end
$var wire 32 *$ d0 [31:0] $end
$var parameter 32 +$ WIDTH $end
$upscope $end
$scope module ForwardCEMux $end
$var wire 32 ,$ d2 [31:0] $end
$var wire 32 -$ y [31:0] $end
$var wire 2 .$ s [1:0] $end
$var wire 32 /$ d1 [31:0] $end
$var wire 32 0$ d0 [31:0] $end
$var parameter 32 1$ WIDTH $end
$upscope $end
$scope module ForwardDEMux $end
$var wire 32 2$ d2 [31:0] $end
$var wire 32 3$ y [31:0] $end
$var wire 2 4$ s [1:0] $end
$var wire 32 5$ d1 [31:0] $end
$var wire 32 6$ d0 [31:0] $end
$var parameter 32 7$ WIDTH $end
$upscope $end
$scope module InstrReg $end
$var wire 1 $ clk $end
$var wire 1 8$ en $end
$var wire 1 % reset $end
$var wire 32 9$ d [31:0] $end
$var parameter 32 :$ WIDTH $end
$var reg 32 ;$ q [31:0] $end
$upscope $end
$scope module MemIndexRegMux $end
$var wire 32 <$ d0 [31:0] $end
$var wire 32 =$ d1 [31:0] $end
$var wire 1 8 s $end
$var wire 32 >$ y [31:0] $end
$var parameter 32 ?$ WIDTH $end
$upscope $end
$scope module MemtoRegMux $end
$var wire 32 @$ d0 [31:0] $end
$var wire 1 6 s $end
$var wire 32 A$ y [31:0] $end
$var wire 32 B$ d1 [31:0] $end
$var parameter 32 C$ WIDTH $end
$upscope $end
$scope module MulAuxDReg $end
$var wire 1 $ clk $end
$var wire 4 D$ d [3:0] $end
$var wire 1 % reset $end
$var wire 1 J clear $end
$var parameter 32 E$ WIDTH $end
$var reg 4 F$ q [3:0] $end
$upscope $end
$scope module MulAuxEReg $end
$var wire 1 $ clk $end
$var wire 4 G$ d [3:0] $end
$var wire 1 % reset $end
$var parameter 32 H$ WIDTH $end
$var reg 4 I$ q [3:0] $end
$upscope $end
$scope module MulAuxMReg $end
$var wire 1 $ clk $end
$var wire 4 J$ d [3:0] $end
$var wire 1 % reset $end
$var parameter 32 K$ WIDTH $end
$var reg 4 L$ q [3:0] $end
$upscope $end
$scope module MulHalfTopEReg $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 32 M$ d [31:0] $end
$var parameter 32 N$ WIDTH $end
$var reg 32 O$ q [31:0] $end
$upscope $end
$scope module MulHalfTopMReg $end
$var wire 1 $ clk $end
$var wire 32 P$ d [31:0] $end
$var wire 1 % reset $end
$var parameter 32 Q$ WIDTH $end
$var reg 32 R$ q [31:0] $end
$upscope $end
$scope module MulInstrDReg $end
$var wire 1 $ clk $end
$var wire 3 S$ d [2:0] $end
$var wire 1 % reset $end
$var wire 1 J clear $end
$var parameter 32 T$ WIDTH $end
$var reg 3 U$ q [2:0] $end
$upscope $end
$scope module RA1DReg $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 4 V$ d [3:0] $end
$var wire 1 J clear $end
$var parameter 32 W$ WIDTH $end
$var reg 4 X$ q [3:0] $end
$upscope $end
$scope module RA1EReg $end
$var wire 1 $ clk $end
$var wire 4 Y$ d [3:0] $end
$var wire 1 % reset $end
$var parameter 32 Z$ WIDTH $end
$var reg 4 [$ q [3:0] $end
$upscope $end
$scope module RA1MReg $end
$var wire 1 $ clk $end
$var wire 4 \$ d [3:0] $end
$var wire 1 % reset $end
$var parameter 32 ]$ WIDTH $end
$var reg 4 ^$ q [3:0] $end
$upscope $end
$scope module RA2DReg $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 4 _$ d [3:0] $end
$var wire 1 J clear $end
$var parameter 32 `$ WIDTH $end
$var reg 4 a$ q [3:0] $end
$upscope $end
$scope module RA3DReg $end
$var wire 1 $ clk $end
$var wire 4 b$ d [3:0] $end
$var wire 1 % reset $end
$var wire 1 J clear $end
$var parameter 32 c$ WIDTH $end
$var reg 4 d$ q [3:0] $end
$upscope $end
$scope module RA4DReg $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 32 e$ d [31:0] $end
$var wire 1 J clear $end
$var parameter 32 f$ WIDTH $end
$var reg 32 g$ q [31:0] $end
$upscope $end
$scope module RD1Reg $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 32 h$ d [31:0] $end
$var wire 1 J clear $end
$var parameter 32 i$ WIDTH $end
$var reg 32 j$ q [31:0] $end
$upscope $end
$scope module RD2Reg $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 32 k$ d [31:0] $end
$var wire 1 J clear $end
$var parameter 32 l$ WIDTH $end
$var reg 32 m$ q [31:0] $end
$upscope $end
$scope module RD3Reg $end
$var wire 1 |" clear $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 32 n$ d [31:0] $end
$var parameter 32 o$ WIDTH $end
$var reg 32 p$ q [31:0] $end
$upscope $end
$scope module ReadDataReg $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 32 q$ d [31:0] $end
$var parameter 32 r$ WIDTH $end
$var reg 32 s$ q [31:0] $end
$upscope $end
$scope module ShiftInstrDReg $end
$var wire 1 $ clk $end
$var wire 12 t$ d [11:0] $end
$var wire 1 % reset $end
$var wire 1 J clear $end
$var parameter 32 u$ WIDTH $end
$var reg 12 v$ q [11:0] $end
$upscope $end
$scope module SrcBMux $end
$var wire 32 w$ d1 [31:0] $end
$var wire 1 N s $end
$var wire 32 x$ y [31:0] $end
$var wire 32 y$ d0 [31:0] $end
$var parameter 32 z$ WIDTH $end
$upscope $end
$scope module WA4DReg $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 4 {$ d [3:0] $end
$var wire 1 J clear $end
$var parameter 32 |$ WIDTH $end
$var reg 4 }$ q [3:0] $end
$upscope $end
$scope module WA4EReg $end
$var wire 1 $ clk $end
$var wire 4 ~$ d [3:0] $end
$var wire 1 % reset $end
$var parameter 32 !% WIDTH $end
$var reg 4 "% q [3:0] $end
$upscope $end
$scope module WA4MReg $end
$var wire 1 $ clk $end
$var wire 4 #% d [3:0] $end
$var wire 1 % reset $end
$var parameter 32 $% WIDTH $end
$var reg 4 %% q [3:0] $end
$upscope $end
$scope module WriteDataReg $end
$var wire 1 $ clk $end
$var wire 1 % reset $end
$var wire 32 &% d [31:0] $end
$var parameter 32 '% WIDTH $end
$var reg 32 (% q [31:0] $end
$upscope $end
$scope module al $end
$var wire 4 )% ALUControl [3:0] $end
$var wire 1 *% carry $end
$var wire 1 L carryIn $end
$var wire 1 +% overflow $end
$var wire 32 ,% preSrcB [31:0] $end
$var wire 1 -% zero $end
$var wire 33 .% sum [32:0] $end
$var wire 32 /% preSrcA [31:0] $end
$var wire 1 0% neg $end
$var wire 32 1% condinvb [31:0] $end
$var wire 1 2% carry_sum $end
$var wire 32 3% SrcB [31:0] $end
$var wire 32 4% SrcA [31:0] $end
$var wire 4 5% ALUFlags [3:0] $end
$var reg 32 6% ALUResult [31:0] $end
$upscope $end
$scope module bso $end
$var wire 32 7% ALUResultW [31:0] $end
$var wire 1 M ByteOp $end
$var wire 32 8% ReadDataW [31:0] $end
$var wire 32 9% ReadDataWPost [31:0] $end
$upscope $end
$scope module div $end
$var wire 1 ]# op $end
$var wire 32 :% rm [31:0] $end
$var wire 32 ;% rn [31:0] $end
$var wire 32 <% y [31:0] $end
$var wire 32 =% u_y [31:0] $end
$var wire 32 >% s_y [31:0] $end
$scope module s $end
$var wire 32 ?% rm [31:0] $end
$var wire 32 @% rn [31:0] $end
$var wire 32 A% y [31:0] $end
$upscope $end
$scope module u $end
$var wire 32 B% rm [31:0] $end
$var wire 32 C% rn [31:0] $end
$var wire 32 D% y [31:0] $end
$var wire 32 E% abs_rn [31:0] $end
$var wire 32 F% abs_rm [31:0] $end
$scope module a_rm $end
$var wire 32 G% value [31:0] $end
$var wire 32 H% abs_value [31:0] $end
$upscope $end
$scope module a_rn $end
$var wire 32 I% value [31:0] $end
$var wire 32 J% abs_value [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module ext $end
$var wire 2 K% ImmSrc [1:0] $end
$var wire 24 L% Instr [23:0] $end
$var reg 32 M% ExtImm [31:0] $end
$upscope $end
$scope module isImmEReg $end
$var wire 1 $ clk $end
$var wire 1 N% d $end
$var wire 1 % reset $end
$var wire 1 J clear $end
$var parameter 32 O% WIDTH $end
$var reg 1 (# q $end
$upscope $end
$scope module mult $end
$var wire 3 P% mul_cmd [2:0] $end
$var wire 1 5 mul_op $end
$var wire 32 Q% ra [31:0] $end
$var wire 32 R% rd [31:0] $end
$var wire 32 S% rm [31:0] $end
$var wire 32 T% rn [31:0] $end
$var reg 32 U% aux [31:0] $end
$var reg 64 V% result_long [63:0] $end
$var reg 32 W% y [31:0] $end
$upscope $end
$scope module pcadd1 $end
$var wire 32 X% b [31:0] $end
$var wire 32 Y% y [31:0] $end
$var wire 32 Z% a [31:0] $end
$var parameter 32 [% WIDTH $end
$upscope $end
$scope module pcmux $end
$var wire 32 \% d0 [31:0] $end
$var wire 32 ]% d1 [31:0] $end
$var wire 1 3 s $end
$var wire 32 ^% y [31:0] $end
$var parameter 32 _% WIDTH $end
$upscope $end
$scope module pcreg $end
$var wire 1 $ clk $end
$var wire 32 `% d [31:0] $end
$var wire 1 a% en $end
$var wire 1 % reset $end
$var parameter 32 b% WIDTH $end
$var reg 32 c% q [31:0] $end
$upscope $end
$scope module ra1mux $end
$var wire 4 d% d0 [3:0] $end
$var wire 4 e% d1 [3:0] $end
$var wire 1 f% s $end
$var wire 4 g% y [3:0] $end
$var parameter 32 h% WIDTH $end
$upscope $end
$scope module ra2mux $end
$var wire 4 i% d0 [3:0] $end
$var wire 4 j% d1 [3:0] $end
$var wire 1 k% s $end
$var wire 1 K x $end
$var wire 4 l% y [3:0] $end
$var parameter 32 m% WIDTH $end
$upscope $end
$scope module ra3mux $end
$var wire 4 n% d0 [3:0] $end
$var wire 4 o% d1 [3:0] $end
$var wire 1 K s $end
$var wire 4 p% y [3:0] $end
$var parameter 32 q% WIDTH $end
$upscope $end
$scope module ra4mux $end
$var wire 4 r% d0 [3:0] $end
$var wire 4 s% d1 [3:0] $end
$var wire 1 K s $end
$var wire 4 t% y [3:0] $end
$var parameter 32 u% WIDTH $end
$upscope $end
$scope module rf $end
$var wire 1 v% clk $end
$var wire 32 w% r0 [31:0] $end
$var wire 32 x% r1 [31:0] $end
$var wire 32 y% r15 [31:0] $end
$var wire 32 z% r2 [31:0] $end
$var wire 32 {% r3 [31:0] $end
$var wire 32 |% r4 [31:0] $end
$var wire 4 }% ra1 [3:0] $end
$var wire 4 ~% ra2 [3:0] $end
$var wire 4 !& ra3 [3:0] $end
$var wire 4 "& ra4 [3:0] $end
$var wire 4 #& wa1 [3:0] $end
$var wire 4 $& wa4 [3:0] $end
$var wire 4 %& wa5 [3:0] $end
$var wire 32 && wd1 [31:0] $end
$var wire 32 '& wd4 [31:0] $end
$var wire 32 (& wd5 [31:0] $end
$var wire 1 D we1 $end
$var wire 1 . we4 $end
$var wire 1 / we5 $end
$var wire 32 )& rd4 [31:0] $end
$var wire 32 *& rd3 [31:0] $end
$var wire 32 +& rd2 [31:0] $end
$var wire 32 ,& rd1 [31:0] $end
$upscope $end
$scope module rot $end
$var wire 32 -& ExtImm [31:0] $end
$var wire 32 .& ExtImm_rot [31:0] $end
$var wire 4 /& rot [3:0] $end
$upscope $end
$scope module shift $end
$var wire 1 (# isImm $end
$var wire 1 0& op $end
$var wire 1 1& op1 $end
$var wire 32 2& rm [31:0] $end
$var wire 4 3& rmi [3:0] $end
$var wire 32 4& rs [31:0] $end
$var wire 2 5& sh [1:0] $end
$var wire 5 6& shamt5 [4:0] $end
$var wire 32 7& y [31:0] $end
$var wire 32 8& shift_offset [31:0] $end
$var wire 32 9& lsr_shift [31:0] $end
$var wire 32 :& lsl_shift [31:0] $end
$var wire 32 ;& asr_shift [31:0] $end
$scope module a $end
$var wire 32 <& rm [31:0] $end
$var wire 32 =& shift_offset [31:0] $end
$var wire 32 >& asr_value [31:0] $end
$upscope $end
$scope module l $end
$var wire 32 ?& rm [31:0] $end
$var wire 32 @& shift_offset [31:0] $end
$var wire 32 A& lsl_value [31:0] $end
$upscope $end
$scope module mx_sh $end
$var wire 1 0& op $end
$var wire 1 1& op1 $end
$var wire 32 B& rs [31:0] $end
$var wire 5 C& shamt5 [4:0] $end
$var wire 32 D& value2shift [31:0] $end
$upscope $end
$scope module r $end
$var wire 32 E& rm [31:0] $end
$var wire 32 F& shift_offset [31:0] $end
$var wire 32 G& lsr_value [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module hzd $end
$var wire 1 J FlushE $end
$var wire 1 A Match_1234D_E $end
$var wire 1 @ Match_1E_M $end
$var wire 1 ? Match_1E_W $end
$var wire 1 > Match_2E_M $end
$var wire 1 = Match_2E_W $end
$var wire 1 < Match_3E_M $end
$var wire 1 ; Match_3E_W $end
$var wire 1 : Match_4E_M $end
$var wire 1 9 Match_4E_W $end
$var wire 1 7 MemtoRegE $end
$var wire 1 0 RegWriteM $end
$var wire 1 . RegWriteW $end
$var wire 1 - StallD $end
$var wire 1 , StallF $end
$var wire 2 H& ForwardDE [1:0] $end
$var wire 2 I& ForwardCE [1:0] $end
$var wire 2 J& ForwardBE [1:0] $end
$var wire 2 K& ForwardAE [1:0] $end
$upscope $end
$upscope $end
$scope module dmem $end
$var wire 32 L& a [31:0] $end
$var wire 1 $ clk $end
$var wire 32 M& rd [31:0] $end
$var wire 32 N& wd [31:0] $end
$var wire 1 " we $end
$upscope $end
$scope module imem $end
$var wire 32 O& a [31:0] $end
$var wire 32 P& rd [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100 u%
b100 q%
b100 m%
b100 h%
b100000 b%
b100000 _%
b100000 [%
b1 O%
b100000 '%
b100 $%
b100 !%
b100 |$
b100000 z$
b1100 u$
b100000 r$
b100000 o$
b100000 l$
b100000 i$
b100000 f$
b100 c$
b100 `$
b100 ]$
b100 Z$
b100 W$
b11 T$
b100000 Q$
b100000 N$
b100 K$
b100 H$
b100 E$
b100000 C$
b100000 ?$
b100000 :$
b100000 7$
b100000 1$
b100000 +$
b100000 %$
b100000 |#
b1 z#
b100000 w#
b100000 t#
b100000 r#
b100000 j#
b100000 g#
b10 f"
b10 b"
b1 Q"
b1 P"
b1 O"
b1 M"
b1 L"
b1 K"
b1 J"
b1 I"
b1 H"
b1 G"
b1 F"
b1 E"
b1 D"
b1 C"
b1 B"
b1 A"
b1 @"
b1 ?"
b1 >"
b1 ="
b1 <"
b1 ;"
b1 :"
b1 9"
b1 8"
b10 6"
b100 3"
b100 0"
b1 ."
b1 -"
b1 ,"
b1 +"
b1 *"
b10 ("
b100 %"
$end
#0
$dumpvars
b11100011101000000000111111111111 P&
b0 O&
b0 N&
b0 M&
b0 L&
b0 K&
b0 J&
b0 I&
b0 H&
b0 G&
b0 F&
b0 E&
b0 D&
b0 C&
b0 B&
b0 A&
b0 @&
b0 ?&
b0 >&
b0 =&
b0 <&
b0 ;&
b0 :&
b0 9&
b0 8&
b0 7&
b0 6&
b0 5&
b0 4&
b0 3&
b0 2&
01&
00&
b0 /&
b0 .&
b0 -&
bx ,&
bx +&
bx *&
bx )&
b0 (&
b0 '&
b0 &&
b0 %&
b0 $&
b0 #&
b0 "&
b0 !&
b0 ~%
b0 }%
bx |%
bx {%
bx z%
b100 y%
bx x%
bx w%
0v%
b0 t%
b0 s%
b0 r%
b0 p%
b0 o%
b0 n%
b0 l%
0k%
b0 j%
b0 i%
b0 g%
0f%
b1111 e%
b0 d%
b0 c%
1a%
b100 `%
b100 ^%
b0 ]%
b100 \%
b0 Z%
b100 Y%
b100 X%
b0 W%
bx V%
b0 U%
b0 T%
b0 S%
b0 R%
b0 Q%
b0 P%
0N%
b0 M%
b0 L%
b0 K%
b0 J%
b0 I%
b0 H%
b0 G%
b0 F%
b0 E%
b0 D%
b0 C%
b0 B%
bx A%
b0 @%
b0 ?%
bx >%
b0 =%
bx <%
b0 ;%
b0 :%
b0 9%
b0 8%
b0 7%
b0 6%
b100 5%
b0 4%
b0 3%
02%
b0 1%
00%
b0 /%
b0 .%
1-%
b0 ,%
0+%
0*%
b0 )%
b0 (%
b0 &%
b0 %%
b0 #%
b0 "%
b0 ~$
b0 }$
b0 {$
b0 y$
b0 x$
b0 w$
b0 v$
b0 t$
b0 s$
b0 q$
b0 p$
bx n$
b0 m$
bx k$
b0 j$
bx h$
b0 g$
bx e$
b0 d$
b0 b$
b0 a$
b0 _$
b0 ^$
b0 \$
b0 [$
b0 Y$
b0 X$
b0 V$
b0 U$
b0 S$
b0 R$
b0 P$
b0 O$
b0 M$
b0 L$
b0 J$
b0 I$
b0 G$
b0 F$
b0 D$
b0 B$
b0 A$
b0 @$
b0 >$
b0 =$
b0 <$
b0 ;$
b11100011101000000000111111111111 9$
18$
b0 6$
b0 5$
b0 4$
b0 3$
b0 2$
b0 0$
b0 /$
b0 .$
b0 -$
b0 ,$
b0 *$
b0 )$
b0 ($
b0 '$
b0 &$
b0 $$
b0 #$
b0 "$
b0 !$
b0 ~#
b0 }#
b0 {#
0y#
b0 x#
b0 v#
b0 u#
b0 s#
b0 q#
b0 p#
b0 o#
bx n#
b0 m#
b0 l#
b0 k#
b0 i#
b0 h#
b0 f#
b100 e#
b0 d#
b0 c#
b0 b#
b0 a#
b0 `#
b0 _#
b0 ^#
0]#
b0 \#
b0 [#
b0 Z#
b0 Y#
b0 X#
b0 W#
b0 V#
b0 U#
b11100011101000000000111111111111 T#
b0 S#
b0 R#
b0 Q#
b0 P#
b0 O#
b0 N#
b0 M#
b0 L#
b100 K#
b100 J#
b0 I#
b0 H#
b0 G#
b0 F#
b0 E#
b0 D#
b0 C#
bx B#
b0 A#
bx @#
b0 ?#
bx >#
b0 =#
b0 <#
bx ;#
b0 :#
b0 9#
b0 8#
b0 7#
b0 6#
b0 5#
b0 4#
b0 3#
bx 2#
b0 1#
b0 0#
b0 /#
b0 .#
b0 -#
b0 ,#
b0 +#
b0 *#
b0 )#
0(#
b0 '#
1&#
1%#
1$#
1##
1"#
1!#
1~"
1}"
z|"
b0 {"
b0 z"
b0 y"
b0 x"
b10010 w"
0v"
0u"
0t"
0s"
b0 r"
b0 q"
b10 p"
1o"
b0 n"
b0 m"
b0 l"
b0 k"
b0 j"
b0 i"
b0 h"
b0 g"
0e"
b1 d"
b0 c"
0a"
b0 `"
0_"
0^"
0]"
0\"
1["
b0 Z"
b0 Y"
b100 X"
0W"
b0 V"
b0 U"
b0 T"
b0 S"
b0 R"
0N"
b0 7"
b0 5"
b0 4"
b0 2"
b0 1"
b0 /"
b0 )"
b0 '"
b0 &"
b10 $"
b10 #"
b0 ""
b100 !"
b0 ~
b0 }
0|
0{
0z
0y
0x
0w
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
0p
0o
0n
0m
0l
0k
0j
0i
0h
0g
0f
0e
0d
0c
0b
0a
0`
0_
b0 ^
1]
0\
0[
0Z
0Y
0X
0W
0V
zU
b0 T
b0 S
b0 R
b100 Q
b0 P
b0 O
0N
0M
0L
0K
0J
b0 I
b0 H
b0 G
b0 F
b0 E
0D
b0 C
b11100011101000000000111111111111 B
1A
1@
1?
1>
1=
1<
1;
1:
19
08
07
06
05
b0 4
03
b0 2
b0 1
00
0/
0.
0-
0,
b0 +
b0 *
b11100011101000000000111111111111 )
b0 (
b0 '
b0 &
1%
1$
b0 #
0"
b0 !
$end
#5
1v%
0$
0%
#10
b0x d"
b0x a#
b0x i#
b0x m#
bx 1%
b0x00 Q
b0x00 !"
b0x00 X"
b0x00 e#
b0x00 5%
x-%
b0x b#
b0x q#
b0x s#
b0x 6%
bx 3%
bx 0#
bx p#
bx x$
bx ,%
bx Q%
bx =%
bx D%
b1000 @#
b1000 k$
b1000 +&
0##
bx *#
bx y$
bx &%
bx 7&
bx .%
bx 4%
b1111111100000000000000000 [#
b1111111100000000000000000 {#
b1111111100000000000000000 .&
0$#
b1111 E#
b1111 _$
b1111 l%
b1111 ~%
bx #"
bx $"
bx p"
bx E%
bx J%
bx F%
bx H%
bx 1#
bx o#
bx /%
bx W%
b11111111 \#
b11111111 M%
b11111111 -&
b1000 >#
b1000 n$
b1000 *&
0!#
b1 ~
b1 '"
b1 h"
b1 q"
b111010 i"
b1110 /"
bx 3#
bx !$
bx ;%
bx @%
bx C%
bx I%
bx T%
bx ;&
bx >&
bx :&
bx A&
bx 9&
bx G&
bx +#
bx '$
bx 2&
bx <&
bx ?&
bx E&
bx <#
bx -$
bx :%
bx ?%
bx B%
bx G%
bx S%
bx 4&
bx B&
bx 9#
bx 3$
bx R%
b11100011101000000001111111111111 )
b11100011101000000001111111111111 B
b11100011101000000001111111111111 T#
b11100011101000000001111111111111 9$
b11100011101000000001111111111111 P&
b1000 K#
b1000 ^%
b1000 `%
b1111 /&
1N%
b111111111111 t$
1y#
b101 S$
b101000000000111111111111 L%
b1111 b$
b1111 !&
b1111 i%
b1111 o%
0"#
b1111 T
b1111 j"
b11100011101000000000 S
1\
b10 R
b10 ""
b10 &"
b10 x"
b10 )%
zZ
b1000 J#
b1000 Y%
b1000 \%
b1000 y%
b100 (
b100 4
b100 L#
b100 Z%
b100 c%
b100 O&
b11100011101000000000111111111111 C
b11100011101000000000111111111111 U#
b11100011101000000000111111111111 ;$
bx A#
bx $$
bx j$
bx ?#
bx *$
bx m$
bx =#
bx 0$
bx p$
bx :#
bx 6$
bx g$
0v%
1$
#15
1v%
0$
#20
bx `"
x+%
b1000 F%
b1000 H%
0}"
1[
bx d"
x*%
b111111111111 0#
b111111111111 p#
b111111111111 x$
b111111111111 ,%
b111111111111 Q%
b0 8&
b0 =&
b0 @&
b0 D&
b0 F&
b1000 <#
b1000 -$
b1000 :%
b1000 ?%
b1000 B%
b1000 G%
b1000 S%
b1000 4&
b1000 B&
b1000 ;&
b1000 >&
b1000 :&
b1000 A&
b1000 9&
b1000 G&
b1000 +#
b1000 '$
b1000 2&
b1000 <&
b1000 ?&
b1000 E&
0~"
b1 /#
b1 {$
b1 t%
b1 "&
b1 l"
bx Q
bx !"
bx X"
bx e#
bx 5%
x0%
x2%
b111111111111 *#
b111111111111 y$
b111111111111 &%
b111111111111 7&
b1111 3&
11&
10&
b11 5&
b11111 6&
b11111 C&
b1 D$
b101000000001111111111111 L%
b1 r%
b1 j%
b11100011101000000001 S
b11100011101000000010111111111111 )
b11100011101000000010111111111111 B
b11100011101000000010111111111111 T#
b11100011101000000010111111111111 9$
b11100011101000000010111111111111 P&
b1100 K#
b1100 ^%
b1100 `%
b1100 @#
b1100 k$
b1100 +&
b1100 >#
b1100 n$
b1100 *&
b111111111111 a#
b111111111111 i#
b111111111111 m#
1W"
bx b#
bx q#
bx s#
bx 6%
bx !
bx &
bx +
bx )#
bx (%
bx N&
b0x `#
b0x u#
b0x v#
b0x #
b0x *
b0x P
b0x d#
b0x f#
b0x k#
b0x ~#
b0x &$
b0x ,$
b0x L&
b1111111100000000000000000 Z#
b1111111100000000000000000 }#
b1111111100000000000000000 w$
1(#
b111111111111 4#
b111111111111 v$
b1000 =#
b1000 0$
b1000 p$
b1000 ?#
b1000 *$
b1000 m$
1]#
b101 M#
b101 U$
b101 P%
0;
0<
b1111 C#
b1111 d$
0=
0>
b1111 D#
b1111 a$
b11100011101000000001111111111111 C
b11100011101000000001111111111111 U#
b11100011101000000001111111111111 ;$
b1100 J#
b1100 Y%
b1100 \%
b1100 y%
b1000 (
b1000 4
b1000 L#
b1000 Z%
b1000 c%
b1000 O&
zY
b1 O
b1 }
b1 )"
b1 y"
b1 l#
b1110 v
b1110 1"
b1110 R"
b1110 Y"
bx R
bx ""
bx &"
bx x"
bx )%
0v%
1$
#25
1v%
0$
#30
b101010101 2#
b101010101 n#
b101010101 <%
b101010101 =%
b101010101 D%
b111111111111 3%
b111111111111 4%
b111111111111 E%
b111111111111 J%
b111111111111 1#
b111111111111 o#
b111111111111 /%
b111111111111 W%
b101010101 >%
b101010101 A%
b111111111111 3#
b111111111111 !$
b111111111111 ;%
b111111111111 @%
b111111111111 C%
b111111111111 I%
b111111111111 T%
0A
b1100 F%
b1100 H%
b10 I
b10 Y#
b10 "$
b10 K&
b10 /#
b10 {$
b10 t%
b10 "&
b10 l"
b1100 ;&
b1100 >&
b1100 :&
b1100 A&
b1100 9&
b1100 G&
b1100 +#
b1100 '$
b1100 2&
b1100 <&
b1100 ?&
b1100 E&
b1100 <#
b1100 -$
b1100 :%
b1100 ?%
b1100 B%
b1100 G%
b1100 S%
b1100 4&
b1100 B&
b11100011101000000011111111111111 )
b11100011101000000011111111111111 B
b11100011101000000011111111111111 T#
b11100011101000000011111111111111 9$
b11100011101000000011111111111111 P&
b10000 K#
b10000 ^%
b10000 `%
b10000 @#
b10000 k$
b10000 +&
b10000 >#
b10000 n$
b10000 *&
b10 D$
b101000000010111111111111 L%
b10 r%
b10 j%
b11100011101000000010 S
0}"
0%#
bx '
bx 2
bx 8#
bx q$
bx M&
b0x 5#
b0x #$
b0x )$
b0x /$
b0x 5$
b0x A$
b0x ]%
b0x '&
b0x ^#
b0x >$
b0x &&
10
zN"
b10000 J#
b10000 Y%
b10000 \%
b10000 y%
b1100 (
b1100 4
b1100 L#
b1100 Z%
b1100 c%
b1100 O&
b11100011101000000010111111111111 C
b11100011101000000010111111111111 U#
b11100011101000000010111111111111 ;$
b1 S#
b1 F$
b1 G$
b1100 ?#
b1100 *$
b1100 m$
b1100 =#
b1100 0$
b1100 p$
0~"
0&#
09
0:
b1 .#
b1 }$
b1 ~$
b111111111111 #
b111111111111 *
b111111111111 P
b111111111111 d#
b111111111111 f#
b111111111111 k#
b111111111111 ~#
b111111111111 &$
b111111111111 ,$
b111111111111 L&
bx `#
bx u#
bx v#
b111111111111 !
b111111111111 &
b111111111111 +
b111111111111 )#
b111111111111 (%
b111111111111 N&
b0x c#
b0x h#
b0x 2$
b0x =$
b0x @$
b0x _#
b0x x#
b0x <$
b0x 7%
0v%
1$
#35
1v%
0$
#40
bx 6#
bx B$
bx 9%
b111111111111 3%
b111111111111 4%
b111111111111 E%
b111111111111 J%
b111111111111 1#
b111111111111 o#
b111111111111 /%
b111111111111 W%
b11111111 2#
b11111111 n#
b11111111 <%
b111111111111 3#
b111111111111 !$
b111111111111 ;%
b111111111111 @%
b111111111111 C%
b111111111111 I%
b111111111111 T%
b11111111 =%
b11111111 D%
b10000 F%
b10000 H%
b1 I
b1 Y#
b1 "$
b1 K&
0A
b11111111 >%
b11111111 A%
b10000 <#
b10000 -$
b10000 :%
b10000 ?%
b10000 B%
b10000 G%
b10000 S%
b10000 4&
b10000 B&
b10000 ;&
b10000 >&
b10000 :&
b10000 A&
b10000 9&
b10000 G&
b10000 +#
b10000 '$
b10000 2&
b10000 <&
b10000 ?&
b10000 E&
b11 /#
b11 {$
b11 t%
b11 "&
b11 l"
bx ^#
bx >$
bx &&
b111111111111 5#
b111111111111 #$
b111111111111 )$
b111111111111 /$
b111111111111 5$
b111111111111 A$
b111111111111 ]%
b111111111111 '&
0}"
b11 D$
b101000000011111111111111 L%
b11 r%
b11 j%
b11100011101000000011 S
b11100000111000100011000110010000 )
b11100000111000100011000110010000 B
b11100000111000100011000110010000 T#
b11100000111000100011000110010000 9$
b11100000111000100011000110010000 P&
b10100 K#
b10100 ^%
b10100 `%
b10100 @#
b10100 k$
b10100 +&
b10100 >#
b10100 n$
b10100 *&
bx _#
bx x#
bx <$
bx 7%
b111111111111 c#
b111111111111 h#
b111111111111 2$
b111111111111 =$
b111111111111 @$
bx 7#
bx s$
bx 8%
b1 R#
b1 I$
b1 J$
0@
b1 -#
b1 "%
b1 #%
0~"
b10 .#
b10 }$
b10 ~$
b10000 =#
b10000 0$
b10000 p$
b10000 ?#
b10000 *$
b10000 m$
b10 S#
b10 F$
b10 G$
b11100011101000000011111111111111 C
b11100011101000000011111111111111 U#
b11100011101000000011111111111111 ;$
b10100 J#
b10100 Y%
b10100 \%
b10100 y%
b10000 (
b10000 4
b10000 L#
b10000 Z%
b10000 c%
b10000 O&
1.
0v%
1$
#45
b111111111111 B#
b111111111111 h$
b111111111111 ,&
b111111111111 w%
1v%
0$
#50
1##
1$#
b11001100 2#
b11001100 n#
b11001100 <%
b11001100 =%
b11001100 D%
b11 E#
b11 _$
b11 l%
b11 ~%
b10 /#
b10 {$
b10 t%
b10 "&
0o"
b0 #"
b0 $"
b0 p"
b10100 F%
b10100 H%
b0 I
b0 Y#
b0 "$
b0 K&
b1001000 [#
b1001000 {#
b1001000 .&
b10010000 \#
b10010000 M%
b10010000 -&
b10 '#
b10 g%
b10 n%
1X
1v"
b10 ~
b10 '"
b10 h"
b10 q"
1e
1u"
1K
b10000 w"
b1110 i"
b10100 ;&
b10100 >&
b10100 :&
b10100 A&
b10100 9&
b10100 G&
b10100 +#
b10100 '$
b10100 2&
b10100 <&
b10100 ?&
b10100 E&
b11001100 >%
b11001100 A%
b10100 <#
b10100 -$
b10100 :%
b10100 ?%
b10100 B%
b10100 G%
b10100 S%
b10100 4&
b10100 B&
1A
bx )
bx B
bx T#
bx 9$
bx P&
b11000 K#
b11000 ^%
b11000 `%
bx @#
bx k$
bx +&
bx >#
bx n$
bx *&
b1 /&
0N%
b110010000 t$
b111 S$
b111000100011000110010000 L%
b1 b$
b1 !&
b10 s%
b0 i%
b0 o%
b10 d%
b1001 T
b1001 j"
b11100000111000100011 S
0}"
b11000 J#
b11000 Y%
b11000 \%
b11000 y%
b10100 (
b10100 4
b10100 L#
b10100 Z%
b10100 c%
b10100 O&
b11100000111000100011000110010000 C
b11100000111000100011000110010000 U#
b11100000111000100011000110010000 ;$
b11 S#
b11 F$
b11 G$
b111111111111 A#
b111111111111 $$
b111111111111 j$
b10100 ?#
b10100 *$
b10100 m$
b10100 =#
b10100 0$
b10100 p$
0~"
b11 .#
b11 }$
b11 ~$
0:
b10 -#
b10 "%
b10 #%
b10 R#
b10 I$
b10 J$
0?
b1 ,#
b1 %%
b1 $&
b1 Q#
b1 L$
b1 %&
0v%
1$
#55
b111111111111 >#
b111111111111 n$
b111111111111 *&
b111111111111 x%
1v%
0$
#60
b0 `"
0+%
0*%
00%
b0 d"
b0 Q
b0 !"
b0 X"
b0 e#
b0 5%
0-%
b111111111111111111111111 b#
b111111111111111111111111 q#
b111111111111111111111111 s#
b111111111111111111111111 6%
b11111111111100000000111111111111000000000000 V%
b111111111111 9#
b111111111111 3$
b111111111111 R%
b1 2#
b1 n#
b1 <%
bx E#
bx _$
bx l%
bx ~%
b1 =%
b1 D%
0A
bx u
bx 5"
bx r"
xb
b111111111111000000000000 a#
b111111111111000000000000 i#
b111111111111000000000000 m#
b1 F
b1 V#
b1 4$
b1 H&
b111111111111 3%
b111111111111 F%
b111111111111 H%
bx B#
bx h$
bx ,&
1o"
b0 #"
b0 $"
b0 p"
b10 H
b10 X#
b10 ($
b10 J&
b111111111111 0#
b111111111111 p#
b111111111111 x$
b111111111111 ,%
b111111111111 Q%
b1 >%
b1 A%
b111111111111 <#
b111111111111 -$
b111111111111 :%
b111111111111 ?%
b111111111111 B%
b111111111111 G%
b111111111111 S%
b111111111111 4&
b111111111111 B&
b111111111111 ;&
b111111111111 >&
b111111111111 :&
b111111111111 A&
b111111111111 9&
b111111111111 G&
b111111111111 +#
b111111111111 '$
b111111111111 2&
b111111111111 <&
b111111111111 ?&
b111111111111 E&
bx [#
bx {#
bx .&
b0xxxxxxxx \#
b0xxxxxxxx M%
b0xxxxxxxx -&
bx >#
bx n$
bx *&
bx /#
bx {$
bx t%
bx "&
x&#
bx I#
bx V$
bx p%
bx }%
bx '#
bx g%
bx n%
0e
0u"
0K
b0 ~
b0 '"
b0 h"
b0 q"
0X
0v"
b10010 w"
bx k"
bx i"
bx l"
bx /"
b111111111111000000000000 4%
b111111111111111111111111 .%
02%
b111111111111 1%
b111111111111 *#
b111111111111 y$
b111111111111 &%
b111111111111 7&
b0 3&
b0 5&
b11 6&
b11 C&
0}"
0##
bx /&
xN%
bx t$
xy#
bx S$
bx D$
bx L%
bx b$
bx !&
bx s%
bx r%
bx j%
bx i%
bx o%
bx d%
x"#
bx T
bx j"
bx S
b11100 K#
b11100 ^%
b11100 `%
b111111111111 P#
b111111111111 M$
b111111111111 U%
b111111111111000000000000 1#
b111111111111000000000000 o#
b111111111111000000000000 /%
b111111111111000000000000 W%
b10 Q#
b10 L$
b10 %&
19
b10 ,#
b10 %%
b10 $&
b11 R#
b11 I$
b11 J$
1>
b11 -#
b11 "%
b11 #%
b1001000 Z#
b1001000 }#
b1001000 w$
0(#
b110010000 4#
b110010000 v$
x~"
x$#
0:
b10 .#
b10 }$
b10 ~$
b111111111111 =#
b111111111111 0$
b111111111111 p$
bx ?#
bx *$
bx m$
b111 M#
b111 U$
b111 P%
0;
b1 C#
b1 d$
b11 D#
b11 a$
bx C
bx U#
bx ;$
b11100 J#
b11100 Y%
b11100 \%
b11100 y%
b11000 (
b11000 4
b11000 L#
b11000 Z%
b11000 c%
b11000 O&
15
1W
b10 O
b10 }
b10 )"
b10 y"
b10 l#
b0 R
b0 ""
b0 &"
b0 x"
b0 )%
0v%
1$
#65
b111111111111 z%
1v%
0$
#70
bx `"
x+%
x*%
x0%
bx d"
bx Q
bx !"
bx X"
bx e#
bx 5%
x-%
bx 9#
bx 3$
bx R%
bx =%
bx D%
bx 1%
x[
bx b#
bx q#
bx s#
bx 6%
bx E%
bx J%
bx 2#
bx n#
bx <%
bx F%
bx H%
bx 3%
x_
xe"
xa"
bx I
bx Y#
bx "$
bx K&
bx G
bx W#
bx .$
bx I&
bx .%
bx 4%
bx 3#
bx !$
bx ;%
bx @%
bx C%
bx I%
bx T%
bx >%
bx A%
bx <#
bx -$
bx :%
bx ?%
bx B%
bx G%
bx S%
bx 4&
bx B&
bx 8&
bx =&
bx @&
bx D&
bx F&
bx 0#
bx p#
bx x$
bx ,%
bx Q%
bx F
bx V#
bx 4$
bx H&
bx H
bx X#
bx ($
bx J&
bx S"
xW"
bx a#
bx i#
bx m#
b100000 K#
b100000 ^%
b100000 `%
b0 P#
b0 M$
b0 U%
bx 1#
bx o#
bx /%
bx W%
bx 3&
x1&
x0&
bx 5&
bx 6&
bx C&
bx *#
bx y$
bx &%
bx 7&
bx ;&
bx >&
bx :&
bx A&
bx 9&
bx G&
bx +#
bx '$
bx 2&
bx <&
bx ?&
bx E&
xa
bx t
bx 7"
bx T"
bx v
bx 1"
bx R"
bx Y"
b0 O
b0 }
b0 )"
b0 y"
b0 l#
0W
05
1V
b100000 J#
b100000 Y%
b100000 \%
b100000 y%
b11100 (
b11100 4
b11100 L#
b11100 Z%
b11100 c%
b11100 O&
x?
x@
bx H#
bx X$
bx Y$
bx D#
bx a$
x;
x<
bx C#
bx d$
bx S#
bx F$
bx G$
bx M#
bx U$
bx P%
x]#
bx A#
bx $$
bx j$
bx =#
bx 0$
bx p$
bx .#
bx }$
bx ~$
bx 4#
bx v$
x(#
bx Z#
bx }#
bx w$
b111111111111000000000000 #
b111111111111000000000000 *
b111111111111000000000000 P
b111111111111000000000000 d#
b111111111111000000000000 f#
b111111111111000000000000 k#
b111111111111000000000000 ~#
b111111111111000000000000 &$
b111111111111000000000000 ,$
b111111111111000000000000 L&
b111111111111111111111111 `#
b111111111111111111111111 u#
b111111111111111111111111 v#
b111111111111 O#
b111111111111 O$
b111111111111 P$
x:
x>
b10 -#
b10 "%
b10 #%
x9
x=
b11 ,#
b11 %%
b11 $&
b11 Q#
b11 L$
b11 %&
0v%
1$
#75
b111111111111 {%
1v%
0$
#80
b111111111111111111111111 ^#
b111111111111111111111111 >$
b111111111111111111111111 &&
b111111111111000000000000 5#
b111111111111000000000000 #$
b111111111111000000000000 )$
b111111111111000000000000 /$
b111111111111000000000000 5$
b111111111111000000000000 A$
b111111111111000000000000 ]%
b111111111111000000000000 '&
b100100 K#
b100100 ^%
b100100 `%
b111111111111111111111111 _#
b111111111111111111111111 x#
b111111111111111111111111 <$
b111111111111111111111111 7%
b111111111111 N#
b111111111111 R$
b111111111111 (&
b10 ,#
b10 %%
b10 $&
b111111111111000000000000 c#
b111111111111000000000000 h#
b111111111111000000000000 2$
b111111111111000000000000 =$
b111111111111000000000000 @$
bx G#
bx [$
bx \$
bx R#
bx I$
bx J$
bx -#
bx "%
bx #%
bx !
bx &
bx +
bx )#
bx (%
bx N&
b0 O#
b0 O$
b0 P$
bx `#
bx u#
bx v#
bx #
bx *
bx P
bx d#
bx f#
bx k#
bx ~#
bx &$
bx ,$
bx L&
b100100 J#
b100100 Y%
b100100 \%
b100100 y%
b100000 (
b100000 4
b100000 L#
b100000 Z%
b100000 c%
b100000 O&
1/
0V
x0
x`
0v%
1$
#85
b111111111111000000000000 z%
1v%
0$
#90
bx K#
bx ^%
bx `%
bx 5#
bx #$
bx )$
bx /$
bx 5$
bx A$
bx ]%
bx '&
bx ^#
bx >$
bx &&
x3
x.
0/
b101000 J#
b101000 Y%
b101000 \%
b101000 y%
b100100 (
b100100 4
b100100 L#
b100100 Z%
b100100 c%
b100100 O&
bx c#
bx h#
bx 2$
bx =$
bx @$
bx ,#
bx %%
bx $&
b0 N#
b0 R$
b0 (&
bx _#
bx x#
bx <$
bx 7%
bx Q#
bx L$
bx %&
bx F#
bx ^$
bx #&
0v%
1$
#95
1v%
0$
#100
bx J#
bx Y%
bx \%
bx y%
bx (
bx 4
bx L#
bx Z%
bx c%
bx O&
0v%
1$
#105
1v%
0$
#110
0v%
1$
#115
1v%
0$
#120
0v%
1$
#125
1v%
0$
#130
0v%
1$
#135
1v%
0$
#140
0v%
1$
#145
1v%
0$
#150
0v%
1$
#155
1v%
0$
#160
0v%
1$
#165
1v%
0$
#170
0v%
1$
#175
1v%
0$
#180
0v%
1$
#185
1v%
0$
#190
0v%
1$
#195
1v%
0$
#200
0v%
1$
#205
1v%
0$
#210
0v%
1$
